AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sample Node.js application for creating and retrieving orders with MySQL
Globals:
  Function:
    Timeout: 30
    MemorySize: 128
Parameters:
  DBHost:
    Type: String
    Default: onemetric-dev-db.chg6s4sq85rw.us-east-1.rds.amazonaws.com
  DBUser:
    Type: String
    Default: admin
  DBPassword:
    Type: String
    Default: Nisharg2025
  DBName:
    Type: String
    Default: onemetricdev
  DBPort:
    Type: String
    Default: '3306'
Resources:
  GetOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getOrder.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          DB_HOST:
            Ref: DBHost
          DB_USER:
            Ref: DBUser
          DB_PASSWORD:
            Ref: DBPassword
          DB_NAME:
            Ref: DBName
          DB_PORT:
            Ref: DBPort
      Events:
        Api:
          Type: Api
          Properties:
            Path: /order/{id}
            Method: get
      CodeUri: GetOrderFunction
    Metadata:
      SamResourceId: GetOrderFunction
  GetPlanListFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getPlanList.getPlanList
      Runtime: nodejs20.x
      CodeUri: GetPlanListFunction
      Environment:
        Variables:
          DB_HOST:
            Ref: DBHost
          DB_USER:
            Ref: DBUser
          DB_PASSWORD:
            Ref: DBPassword
          DB_NAME:
            Ref: DBName
          DB_PORT:
            Ref: DBPort
      Events:
        GetPlanListApi:
          Type: Api
          Properties:
            Path: /plans
            Method: get
    Metadata:
      SamResourceId: GetPlanListFunction
  CreatePlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: createPlan.createPlan
      Runtime: nodejs20.x
      CodeUri: CreatePlanFunction
      Environment:
        Variables:
          DB_HOST:
            Ref: DBHost
          DB_USER:
            Ref: DBUser
          DB_PASSWORD:
            Ref: DBPassword
          DB_NAME:
            Ref: DBName
          DB_PORT:
            Ref: DBPort
      Events:
        CreatePlanApi:
          Type: Api
          Properties:
            Path: /plans
            Method: post
    Metadata:
      SamResourceId: CreatePlanFunction
  DeletePlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: deletePlan.deletePlan
      Runtime: nodejs20.x
      CodeUri: DeletePlanFunction
      Environment:
        Variables:
          DB_HOST:
            Ref: DBHost
          DB_USER:
            Ref: DBUser
          DB_PASSWORD:
            Ref: DBPassword
          DB_NAME:
            Ref: DBName
          DB_PORT:
            Ref: DBPort
      Events:
        DeletePlanApi:
          Type: Api
          Properties:
            Path: /plans/{id}
            Method: delete
    Metadata:
      SamResourceId: DeletePlanFunction
  CreatePaymentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: createPayment.createPayment
      Runtime: nodejs20.x
      CodeUri: CreatePaymentFunction
      Timeout: 40
      Environment:
        Variables:
          DB_HOST:
            Ref: DBHost
          DB_USER:
            Ref: DBUser
          DB_PASSWORD:
            Ref: DBPassword
          DB_NAME:
            Ref: DBName
          DB_PORT:
            Ref: DBPort
      Events:
        CreatePaymentApi:
          Type: Api
          Properties:
            Path: /payment
            Method: post
    Metadata:
      SamResourceId: CreatePaymentFunction
  TransactionHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: transactionHistory.transactionHistoryAPI
      Runtime: nodejs20.x
      CodeUri: TransactionHistoryFunction
      Timeout: 30
      Environment:
        Variables:
          DB_HOST:
            Ref: DBHost
          DB_USER:
            Ref: DBUser
          DB_PASSWORD:
            Ref: DBPassword
          DB_NAME:
            Ref: DBName
      Events:
        TransactionHistoryEndpoint:
          Type: Api
          Properties:
            Path: /transactionHistory/{user_id}
            Method: get
    Metadata:
      SamResourceId: TransactionHistoryFunction
  RazorpayWebhookFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: webhookHandler.handleWebhook
      Runtime: nodejs20.x
      CodeUri: RazorpayWebhookFunction
      Timeout: 30
      Environment:
        Variables:
          DB_HOST:
            Ref: DBHost
          DB_USER:
            Ref: DBUser
          DB_PASSWORD:
            Ref: DBPassword
          DB_NAME:
            Ref: DBName
          RAZORPAY_WEBHOOK_SECRET:
            Ref: RazorpayWebhookSecret
      Events:
        RazorpayWebhookApi:
          Type: Api
          Properties:
            Path: /webhooks/razorpay
            Method: post
    Metadata:
      SamResourceId: RazorpayWebhookFunction
